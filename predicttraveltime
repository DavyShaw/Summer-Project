from flask import Flask, render_template, g, jsonify, request
from dbus import config
from sqlalchemy import create_engine
#import MySQLdb
import json
import pandas
from sklearn.ensemble import RandomForestRegressor
from sklearn import model_selection
import pickle
import re
app = Flask(__name__)

    
def connect_to_database():
    db_str = "mysql+mysqldb://{}:{}@{}:{}/{}"
    engine = create_engine(db_str.format(config.USER,
                                        config.PASSWORD,
                                        config.URI,
                                        config.PORT,
                                        config.DB),
                           echo=True)
    return engine

def get_db():
    engine = getattr(g, 'engine', None)
    if engine is None:
        engine = g.engine = connect_to_database()
    return engine

@app.route("/")
def main():
    with open('routes.json') as data_file:
        json_file_routes = json.load(data_file)
        
    with open('routes.json') as data_file:
        json_routes = json.load(data_file)
        
    with open('routes_and_stops.json') as data_file:
        json_file_stops = json.load(data_file)
    
    return render_template("index.html", json_file_routes = json_file_routes, json_file_stops = json_file_stops, json_routes = json_routes)

@app.route("/routes", methods=['GET','POST'])
def routes():
   
    chosenroute = request.form.get('chosenroute')
  
    chosenorigin = request.form.get('chosenorigin')
   
    chosendestination = request.form.get('chosendestination')
  
    chosenday = request.form.get('chosenday')
    
    chosentime = request.form.get('chosentime')
   
    chosenweather = request.form.get('chosenweather')
   
    dataframe = pandas.read_csv('cleangps.csv')
    array = dataframe.values
    X = array[:,0:7]
    Y = array[:,7]
    test_size = 0.33
    seed = 7
    X_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=test_size, random_state=seed)
    # Fit the model on 33%
    model = RandomForestRegressor()  
    model.fit(X_train, Y_train)
    # save the model to disk
    filename = 'finalized_model.sav'
    pickle.dump(model, open(filename, 'wb'))
    
    #select the data from cleangps.csv according to input lineid,time and day
    #calculating the average time between two adjacent stops
    chosenday1=int(re.search(r'\d+', chosenday).group())
    chosentime1=int(re.search(r'\d+', chosentime).group())
    chosenroute1=int(re.search(r'\d+', chosenroute).group())
    chosenorign =int(re.search(r'\d+', chosenorign).group())
    chosendest=int(re.search(r'\d+', chosendestination).group())
    data =[]
    for i in range(0,len(X)):
            if X[i][0]==chosenroute1 and X[i][2]==chosentime1 and X[i][3]==chosenday1:
                data.append(X[i])
  
    #extract the index for origin and destination
    list =[]
    for i in range(len(data)):
        if data[i][1]==chosenorign:
            list.append(i)
        if data[i][1]==chosendest:
            list.append(i)
            
        
    # load the model from disk
    loaded_model = pickle.load(open(filename, 'rb'))
    
    result = loaded_model.predict(data[list[0]:list[1]])
    total = 0
    for i in range(len(result)):
        total += (result[i])
    time = total/60
    
    return (time)
